@model Bloggie.Web.Models.ViewModels.EditBlogPostRequest

<div class="bg-secondary bg-opacity-10 py-2">
    <div class="container">
        <h1>Edit BlogPost - Admin Functionality</h1>
    </div>
</div>

<div class="container py-5">
    @if (Model != null)
    {
        <form method="post">

            @* Hidden ID field is not added here as it's visible but read-only, 
               but in a real application, you might use a hidden input for the ID to be posted back. *@

            <div class="mb-3">
                <label class="form-label" for="id">Id</label>
                <input type="text" class="form-control" id="id" asp-for="Id" readonly />
            </div>

            <div class="mb-3">
                <label class="form-label" for="heading">Heading</label>
                <input type="text" class="form-control" id="heading" asp-for="Heading" />
            </div>

            @* ... All other form fields (PageTitle, Content, ShortDescription, etc.) go here ... *@
            @* The fields below were copied from Add.cshtml and assume similar markup exists: *@

            <div class="mb-3">
                <label class="form-label" for="pageTitle">Page Title</label>
                <input type="text" class="form-control" id="pageTitle" asp-for="PageTitle" />
            </div>

            <div class="mb-3">
                <label class="form-label" for="content">Content</label>
                <textarea class="form-control" id="content" asp-for="Content"></textarea>
            </div>

            <div class="mb-3">
                <label class="form-label" for="shortDescription">Short Description</label>
                <input type="text" class="form-control" id="shortDescription" asp-for="ShortDescription" />
            </div>

            @* --- Add Featured Image Upload Section --- *@
            <div class="mb-3">
                <label class="form-label">Featured Image Upload</label>
                <input type="file" id="featuredImageUpload" class="form-control" />

                @if (Model.FeaturedImageUrl != null)
                {
                    @* Show image and set src if a URL exists, making it display: block *@
                    <img src="@Model.FeaturedImageUrl" id="featuredImageDisplay" style="display: block; width: 300px;" />
                }
                else
                {
                    @* Hide image initially if no URL exists in the model *@
                    <img src="" id="featuredImageDisplay" style="display: none; width: 300px;" />
                }
            </div>
            @* --- End Featured Image Upload Section --- *@

            @* --- Existing Featured Image URL Input Field --- *@
            <div class="mb-3">
                <label class="form-label">[Featured Image URL Label Here]</label>
                <input type="text" class="form-control" id="featuredImageUrl" asp-for="FeaturedImageUrl" />
            </div>
            @* --- End Existing Featured Image URL Input Field --- *@

            <div class="mb-3">
                <label class="form-label" for="featuredImageUrl">Featured Image URL</label>
                <input type="text" class="form-control" id="featuredImageUrl" asp-for="FeaturedImageUrl" />
            </div>

            <div class="mb-3">
                <label class="form-label" for="urlHandle">URL Handle</label>
                <input type="text" class="form-control" id="urlHandle" asp-for="UrlHandle" />
            </div>

            <div class="mb-3">
                <label class="form-label" for="publishedDate">Published Date</label>
                <input type="date" class="form-control" id="publishedDate" asp-for="PublishedDate" />
            </div>

            <div class="mb-3">
                <label class="form-label" for="author">Author</label>
                <input type="text" class="form-control" id="author" asp-for="Author" />
            </div>

            <div class="form-check mb-3">
                <input class="form-check-input" type="checkbox" id="visible" asp-for="Visible" />
                <label class="form-check-label" for="visible">Is Visible?</label>
            </div>

            <div class="mb-3">
                <label class="form-label">Tags</label>
                <select class="form-select" asp-items="Model.Tags" asp-for="SelectedTags"></select>
            </div>

            <div class="mb-3">
                <button type="submit" class="btn btn-dark">Update</button>
                <button type="submit" class="btn btn-danger ms-2"
                        asp-area=""
                        asp-controller="AdminBlogPosts"
                        asp-action="Delete">
                    Delete
                </button>
            </div>

        </form>
    }
    else
    {
        <p>No blog post found!</p>
    }
</div>

@section Scripts{
    <script>
        var editor= new FroalaEditor('#content',{
            imageUploadURL: '/api/images' // Froala option to specify a custom API endpoint for image uploads
        });
            // 1. Element selection
        const featuredUploadElement = document.getElementById('featuredImageUpload');
        const featuredImageUrlElement = document.getElementById('featuredImageUrl');
        const featuredImageDisplayElement = document.getElementById('featuredImageDisplay');

        // 2. Event listener
        featuredUploadElement.addEventListener('change', uploadFeaturedImage);

        // 3. Asynchronous function definition
        async function uploadFeaturedImage(e) {

            // Remove existing error message logging from testing, now it is correct
            // console.log(e.target.files[0]);

            // Create form data and append the file with the key 'file'
            let data = new FormData();
            data.append('file', e.target.files[0]);

            // Await the fetch call to the Image API
            // No Content-Type needed for FormData body
            await fetch('/api/images', {
                method: 'POST',
                headers: {
                    'Accept': '*/*'
                },
                body: data
            })
            .then(response => response.json()) // Get the JSON response
            .then(result => {
                // Update the Feature Image URL input field value with the Cloudinary link
                featuredImageUrlElement.value = result.link;

                // Update the image source (to display the preview)
                featuredImageDisplayElement.src = result.link;

                // Make the image display block (show it)
                featuredImageDisplayElement.style.display = 'block';
            });
        }
    </script>
}